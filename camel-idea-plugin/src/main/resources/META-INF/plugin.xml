<idea-plugin version="2" url="https://github.com/davsclaus/camel-idea-plugin">
  <id>org.apache.camel</id>
  <name>Apache Camel IDEA Plugin</name>
  <version>0.3.3</version>
  <vendor email="users@apache.camel.org" url="http://camel.apache.org">Apache Camel</vendor>

  <description><![CDATA[
      Plugin for Intellij IDEA to provide a set of small Apache Camel related capabilities to the code editor.

      The plugin includes:
      <ul>
        <li>Smart completion for Camel endpoints in Java, Groovy, Kotlin, Scala, XML, properties or yaml files (ctrl + space)</li>
        <li>Smart completion for Camel property placeholders (cursor after {{)</li>
        <li>Endpoint options filtered to only include applicable options when used as consumer vs producer only mode</li>
        <li>Intention to add new Camel endpoint (alt + enter in empty string)</li>
        <li>Quick documentation for Camel endpoints and external link to Camel component opening in web browser (ctrl + j and shift-F1)</li>
        <li>Show endpoint information in tooltip when hovering mouse over from/to etc in Java route builders</li>
        <li>Supports 3rd party Camel components (if they have been properly built with Camel JSon schema metadata)</li>
        <li>Attempts to use same version as camel-core dependency from the loaded project (may require download over internet)<li>
        <li>Real time validation for Camel endpoints in Java, Groovy, Kotlin, Scala, XML (underline errors in red)</li>
        <li>Real time validation for Camel simple language in Java (underline errors in red)</li>
        <li>Inspection (analyze code) to validate Camel endpoints and Simple language in Java, Groovy, Kotlin, Scala, and XML</li>
      </ul>
    ]]></description>

  <change-notes><![CDATA[
      <ul>
        <li>0.3.3 - Real time validation of Simple language now validates predicates vs expression mode.
                    Add Simple language to inspection (analyze code).
                    Added XML language to real time validation of Simple language in editor</li>
        <li>0.3.2 - Real time validation of Simple language in editor for Java, Groovy, Kotlin, Scala, and XML.
                    Real time validation for Camel endpoints can now check in consumer and producer only mode.
                    Inspection (analyze code) to validate Camel endpoints in Java, Groovy, Kotlin, Scala, and XML.
                    Smart completion can show quick document for the selected option in the list (ctrl + j)</li>
        <li>0.3.1 - Allow to turn on or off scanning for third party components.
                    Real time validation is now checked for endpoints used outside routes.
                    Minor bug fixes.</li>
        <li>0.3.0 - Restructured project as multi Maven module to support further work.
                    Add support for 3rd party Camel components (not from the Apache Camel release).
                    The plugin will attempt to use same camel-catalog version as the camel-core version used in the project.
                    Add support for real time validate Camel endpoints (underline errors in red).
                    Attempts to use same version as camel-core dependency from the loaded project (may require download over internet)
                    Added preference page to configure the plugin.<li>
      </ul>
    ]]>
  </change-notes>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
  <idea-version since-build="162.0"/>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
       on how to target different products -->
  <depends>com.intellij.modules.java</depends>

  <!-- depend on the properties plugin -->
  <depends>com.intellij.properties</depends>

  <project-components>
    <!-- Camel project component -->
    <component>
      <implementation-class>org.apache.camel.idea.CamelProjectComponent</implementation-class>
    </component>
  </project-components>

  <extensions defaultExtensionNs="com.intellij">

    <!-- services which can be requested from IDEA api -->
    <projectService serviceImplementation="org.apache.camel.idea.service.CamelCatalogService"/>
    <projectService serviceImplementation="org.apache.camel.idea.service.CamelService"/>
    <applicationService serviceImplementation="org.apache.camel.idea.service.CamelPreferenceService"/>

    <!-- allow smart completion of Camel endpoints-->
    <completion.contributor language="JAVA" implementationClass="org.apache.camel.idea.completion.CamelJavaReferenceContributor"/>
    <completion.contributor language="XML" implementationClass="org.apache.camel.idea.completion.CamelXmlReferenceContributor"/>
    <completion.contributor language="Groovy" implementationClass="org.apache.camel.idea.completion.CamelGroovyReferenceContributor"/>
    <completion.contributor language="kotlin" implementationClass="org.apache.camel.idea.completion.CamelKotlinReferenceContributor"/>
    <completion.contributor language="Scala" implementationClass="org.apache.camel.idea.completion.CamelScalaReferenceContributor"/>
    <completion.contributor language="any" implementationClass="org.apache.camel.idea.completion.CamelPropertiesOrYamlFileReferenceContributor"/>

    <!-- puts the Camel icon in the gutter for each line that starts a Camel route -->
    <codeInsight.lineMarkerProvider language="JAVA" implementationClass="org.apache.camel.idea.gutter.CamelRouteLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="XML" implementationClass="org.apache.camel.idea.gutter.CamelRouteLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="Groovy" implementationClass="org.apache.camel.idea.gutter.CamelRouteLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.apache.camel.idea.gutter.CamelRouteLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="Scala" implementationClass="org.apache.camel.idea.gutter.CamelRouteLineMarkerProvider"/>

    <!-- smart completion of Camel property placeholders, eg {{foo}} style -->
    <completion.contributor language="any" implementationClass="org.apache.camel.idea.completion.CamelPropertyPlaceholderReferenceContributor"/>

    <!-- quick documentation for Camel endpoints -->
    <lang.documentationProvider language="JAVA" implementationClass="org.apache.camel.idea.documentation.CamelDocumentationProvider"
                                order="first"/>
    <lang.documentationProvider language="XML" implementationClass="org.apache.camel.idea.documentation.CamelDocumentationProvider"
                                order="first"/>
    <lang.documentationProvider language="Groovy" implementationClass="org.apache.camel.idea.documentation.CamelDocumentationProvider"
                                order="first"/>
    <lang.documentationProvider language="kotlin" implementationClass="org.apache.camel.idea.documentation.CamelDocumentationProvider"
                                order="first"/>
    <lang.documentationProvider language="Scala" implementationClass="org.apache.camel.idea.documentation.CamelDocumentationProvider"
                                order="first"/>
    <lang.documentationProvider language="Properties" implementationClass="org.apache.camel.idea.documentation.CamelDocumentationProvider"
                                order="first"/>
    <lang.documentationProvider language="yaml" implementationClass="org.apache.camel.idea.documentation.CamelDocumentationProvider"
                                order="first"/>

    <!-- intention to add Camel endpoint -->
    <intentionAction>
      <className>org.apache.camel.idea.intention.CamelAddEndpointIntention</className>
    </intentionAction>

    <!-- annotator to validate endpoints -->
    <annotator language="JAVA" implementationClass="org.apache.camel.idea.annotator.CamelEndpointAnnotator"/>
    <annotator language="XML" implementationClass="org.apache.camel.idea.annotator.CamelEndpointAnnotator"/>
    <annotator language="Groovy" implementationClass="org.apache.camel.idea.annotator.CamelEndpointAnnotator"/>
    <annotator language="kotlin" implementationClass="org.apache.camel.idea.annotator.CamelEndpointAnnotator"/>
    <annotator language="Scala" implementationClass="org.apache.camel.idea.annotator.CamelEndpointAnnotator"/>
    <annotator language="Properties" implementationClass="org.apache.camel.idea.annotator.CamelEndpointAnnotator"/>
    <annotator language="yaml" implementationClass="org.apache.camel.idea.annotator.CamelEndpointAnnotator"/>

    <!-- annotator to validate simple language -->
    <annotator language="JAVA" implementationClass="org.apache.camel.idea.annotator.CamelSimpleAnnotator"/>
    <annotator language="XML" implementationClass="org.apache.camel.idea.annotator.CamelSimpleAnnotator"/>

    <!-- inspection to validate endpoints -->
    <localInspection groupName="Apache Camel" language="JAVA" implementationClass="org.apache.camel.idea.inspection.CamelJavaInspection"/>
    <localInspection groupName="Apache Camel" language="XML" implementationClass="org.apache.camel.idea.inspection.CamelXmlInspection"/>
    <localInspection groupName="Apache Camel" language="Groovy" implementationClass="org.apache.camel.idea.inspection.CamelGroovyInspection"/>
    <localInspection groupName="Apache Camel" language="kotlin" implementationClass="org.apache.camel.idea.inspection.CamelKotlinInspection"/>
    <localInspection groupName="Apache Camel" language="Scala" implementationClass="org.apache.camel.idea.inspection.CamelScalaInspection"/>

    <!-- preference -->
    <applicationConfigurable id="camel" displayName="Apache Camel" groupId="other"
                             instance="org.apache.camel.idea.preference.CamelPreferencePage"/>

    <facetType implementation="org.apache.camel.idea.facet.CamelFacetType"/>
    <framework.detector implementation="org.apache.camel.idea.facet.CamelFrameworkDetector"/>
  </extensions>

</idea-plugin>